# PyTorch manifest template

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ entrypoint }}"

loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:/usr/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}:/gramine/meson_build_output/lib/x86_64-linux-gnu"

loader.insecure__use_cmdline_argv = true
loader.insecure__use_host_env = true

loader.pal_internal_mem_size = "128M"

fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ gramine.runtimedir() }}/"

fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"

fs.mount.mnt.type = "chroot"
fs.mount.mnt.path = "/mnt/"
fs.mount.mnt.uri = "file:/mnt"

sgx.remote_attestation = true

loader.env.LD_PRELOAD = "libsecret_prov_attest.so"
loader.env.SECRET_PROVISION_CONSTRUCTOR = "1"
loader.env.SECRET_PROVISION_SET_PF_KEY = "1"
loader.env.SECRET_PROVISION_CA_CHAIN_PATH = "/mnt/certs/ca.crt"
loader.env.SECRET_PROVISION_SERVERS = "ra-tls-secret-prov:4433"

# PyTorch loads its pre-trained models from here
# Uncomment lines below if you want to use torchvision.model.alexnet(pretrained=True)
# fs.mount.torch.type = "chroot"
# fs.mount.torch.path = "{{ env.HOME }}/.cache/torch"
# fs.mount.torch.uri = "file:{{ env.HOME }}/.cache/torch"

fs.mount.pip.type = "chroot"
fs.mount.pip.path = "{{ env.HOME }}/.local/lib"
fs.mount.pip.uri = "file:{{ env.HOME }}/.local/lib"

sgx.nonpie_binary = true
sgx.enclave_size = "16G"
sgx.thread_num = 256

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ entrypoint }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:{{ python.stdlib }}/",
  "file:{{ python.distlib }}/",
  "file:{{ env.HOME }}/.local/lib/",
  "file:{{ python.get_path('stdlib', vars={'installed_base': '/usr/local'}) }}/",
  "file:/gramine/meson_build_output/lib/x86_64-linux-gnu/libsecret_prov_attest.so",
  "file:pytorchexample.py",

  # Uncomment line below if you want to use torchvision.model.alexnet(pretrained=True)
  # "file:{{ env.HOME }}/.cache/torch/checkpoints/alexnet-owt-4df8aa71.pth",
]

sgx.protected_files = [
  "file:classes.txt",
  "file:input.jpg",

  # Pre-trained model saved as a file
  "file:alexnet-pretrained.pt",
  "file:/mnt/pytorch/result.txt",
]

sgx.allowed_files = [
  "file:/tmp",
  "file:/etc/apt/apt.conf.d",
  "file:/etc/apt/apt.conf",
  "file:/etc/default/apport",
  "file:/etc/nsswitch.conf",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/host.conf",
  "file:/etc/hosts",
  "file:/etc/gai.conf",
  "file:/etc/resolv.conf",
  "file:/etc/fstab",
  "file:/mnt/pytorch/result.txt",
  "file:/mnt/certs/ca.crt",
]

# Gramine optionally provides patched OpenMP runtime library that runs faster
# inside SGX enclaves (execute `make -C LibOS gcc` to generate it). Uncomment
# the lines below to use the patched library. PyTorch's SGX perf overhead
# decreases on some workloads from 25% to 8% with this patched library. Note
# that we need to preload the library because PyTorch's distribution renames
# libgomp.so to smth like libgomp-7c85b1e2.so.1, so it's not just a matter of
# searching in the Gramine's Runtime path first, but a matter of intercepting
# OpenMP functions.
# loader.env.LD_PRELOAD = "/lib/libgomp.so.1"
